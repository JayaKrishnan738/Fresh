
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{
    int coef;
    int exp;
    struct node *link;  
};
void insert_term(struct node **,int,int);
void traverse(struct node *);
void poly_add(struct node **,struct node **,struct node **);
void main()
{ 
     struct node *start_p=NULL,*start_q=NULL,*start_r=NULL;
     int i,n,c,e;
     printf("Enter first polynomial!\n");
     printf("Enter no of terms:");
     scanf("%d",&n);
     for(i=0;i<n;i++)
     {
          printf("Enter coefficient: ");
          scanf("%d",&c);
          printf("Enter exponent: ");
          scanf("%d",&e);
          insert_term(&start_p,c,e);
     }
     printf("Enter second polynomial!\n");
     printf("Enter no of terms:");
     scanf("%d",&n);
     for(i=0;i<n;i++)
     {
        printf("Enter coefficient: ");
        scanf("%d",&c);
        printf("Enter exponent: ");
        scanf("%d",&e);
        insert_term(&start_q,c,e);
     }
     printf("First polynomial: ");
     traverse(start_p);
     printf("Second polynomial: ");
     traverse(start_q);
     poly_add(&start_p,&start_q,&start_r);
     printf("Sum of two polynomial:\n");
     traverse(start_r);
}
void insert_term(struct node **start,int c,int e)
{ 
    struct node *temp,*temp1,*prev;
    if (*start==NULL)
    {
       temp=(struct node*)malloc(sizeof(struct node));
       if (temp==NULL)
          printf("Node is not created, Term cannot be inserted\n");
       else
       {
          temp->coef=c;
          temp->exp=e;
          temp->link=NULL;
          *start=temp;
       }
    }
    else
    {
       temp1=*start;
       while (temp1!=NULL && temp1->exp>e)
       {
          prev=temp1;
          temp1=temp1->link;
       }
       if(temp1==NULL)
       {
           temp=(struct node *)malloc(sizeof(struct node));
           if (temp==NULL)
               printf("Node is not created\n");
           else
           { 
               temp->coef=c;
               temp->exp=e;
               temp->link=NULL;
               prev->link=temp;
           }
       }
       else
       {
          if(temp1->exp==e)
             temp1->coef=temp1->coef+c;
          else
          { 
             if(temp1==*start)
             { 
                temp=(struct node *)malloc (sizeof (struct node));
                if(temp==NULL)
                  printf("Node is not created\n");
                else
                { 
                   temp->coef=c;
                   temp->exp=e;
                   temp->link=*start;
                   *start=temp;
                 }
             }
             else
             {
                temp=(struct node *)malloc(sizeof(struct node));
                if (temp==NULL)
                   printf("Node is not created\n");
                else
                {
                    temp->coef=c;
                    temp->exp=e;
                    temp->link=temp1;
                    prev->link=temp;
                }
             }
       }
   }
  }
}
void traverse(struct node *start)
{ 
     struct node *temp;
     temp=start;
     if (temp==NULL)
        printf("Empty polynomial\n");
     else
     {
        while(temp!=NULL)
        {
           printf("%d x^%d",temp->coef,temp->exp);
           temp=temp->link;
           if(temp!=NULL)
              printf(" + ");
           else
              printf("\n");
        }
     }
}
void poly_add(struct node** start_p,struct node **start_q,struct node** start_r)
{
    int c,e;
    struct node *pptr,*qptr;
    *start_r=NULL;
    pptr=*start_p;
    qptr=*start_q;
    while(pptr!=NULL && qptr!=NULL)
    {
        if (pptr->exp==qptr->exp)
        {
          c=pptr->coef+qptr->coef;
          e=pptr->exp;
          insert_term(start_r,c,e);
          pptr=pptr->link;
          qptr=qptr->link;
        }
        else
        { 
           if (pptr->exp>qptr->exp)
           {
               c=pptr->coef;
               e=pptr->exp;
               insert_term(start_r,c,e);
               pptr=pptr->link;
           }
           else
           {
              c=qptr->coef;
              e=qptr->exp;
              insert_term(start_r,c,e);
              qptr=qptr->link;
           } 
        }
    }
    while(pptr!=NULL)
    {
        c=pptr->coef;
        e=pptr->exp;
       insert_term(start_r,c,e);
       pptr=pptr->link;
    }
    while (qptr!=NULL)
    {
       c=qptr->coef;
       e=qptr->exp;
       insert_term(start_r,c,e);
       qptr=qptr->link;
    }
}
--------16--------
/*
      Create a binary tree with the following operations
      1.Insert a new node
      2.Inorder traversal.
      3.Preorder traversal.
      4.Postorder traversal.
      5.Delete a node
location :  C:\Users\sandh\Documents       file name  :  binarytreeeg.c
*/

# include <stdio.h>
# include <malloc.h>
struct node
{
	int info;
	struct node *lchild;
	struct node *rchild;
}*root;
void find(int item,struct node **par,struct node **loc)
{
	struct node *ptr,*ptrsave;

	if(root==NULL)          /*tree empty*/
	{
		*loc=NULL;
		*par=NULL;
		return;
	}
	if(item==root->info)  /*item is at root*/
	{
		*loc=root;
		*par=NULL;
		return;
	}
	                    /*Initialize ptr and ptrsave*/
	if(item<root->info)
		ptr=root->lchild;
	else
		ptr=root->rchild;
	ptrsave=root;

	while(ptr!=NULL)
	{
		if(item==ptr->info)
		{       *loc=ptr;
			*par=ptrsave;
			return;
		}
		ptrsave=ptr;
		if(item<ptr->info)
			ptr=ptr->lchild;
		else
			ptr=ptr->rchild;
	 }                    /*End of while */
	 *loc=NULL;          /*item not found*/
	 *par=ptrsave;
}                           /*End of find()*/

void insert(int item)
{       struct node *tmp,*parent,*location;
	find(item,&parent,&location);
	if(location!=NULL)
	{
		printf("Item already present");
		return;
	}

	tmp=(struct node *)malloc(sizeof(struct node));
	tmp->info=item;
	tmp->lchild=NULL;
	tmp->rchild=NULL;

	if(parent==NULL)
		root=tmp;
	else
		if(item<parent->info)
		   parent->lchild=tmp;
		else
		   parent->rchild=tmp;
}                       /*End of insert()*/


void case_a(struct node *par,struct node *loc )
{
	if(par==NULL)         /*item to be deleted is root node*/
	  root=NULL;
	else
	   if(loc==par->lchild)
	      par->lchild=NULL;
	   else
	      par->rchild=NULL;
}                          /*End of case_a()*/

void case_b(struct node *par,struct node *loc)
{
	struct node *child;              /*Initialize child*/
	if(loc->lchild!=NULL)           /*item to be deleted has lchild */
	  child=loc->lchild;
	else                           /*item to be deleted has rchild */
	  child=loc->rchild;
          if(par==NULL )   /*Item to be deleted is root node*/
	    root=child;
          else
            if( loc==par->lchild)    /*item is lchild of its parent*/
		par->lchild=child;
	    else                    /*item is rchild of its parent*/
		par->rchild=child;
}                                  /*End of case_b()*/

void case_c(struct node *par,struct node *loc)
{
	struct node *ptr,*ptrsave,*suc,*parsuc;     /*Find inorder successor and its parent*/
	ptrsave=loc;
	ptr=loc->rchild;
	while(ptr->lchild!=NULL)
	{
		ptrsave=ptr;
		ptr=ptr->lchild;
	}
	suc=ptr;
	parsuc=ptrsave;
        if(suc->lchild==NULL && suc->rchild==NULL)
	  case_a(parsuc,suc);
	else
	   case_b(parsuc,suc);
           if(par==NULL)              /*if item to be deleted is root node */
		root=suc;
	   else
		if(loc==par->lchild)
		   par->lchild=suc;
		else
		   par->rchild=suc;

	suc->lchild=loc->lchild;
	suc->rchild=loc->rchild;
}                                  /*End of case_c()*/
int del(int item)
{
	struct node *parent,*location;
	if(root==NULL)
	{
		printf("Tree empty");
		return 0;
	}

	find(item,&parent,&location);
	if(location==NULL)
	{
		printf("Item not present in tree");
		return 0;
	}

	if(location->lchild==NULL && location->rchild==NULL)
		case_a(parent,location);
	if(location->lchild!=NULL && location->rchild==NULL)
		case_b(parent,location);
	if(location->lchild==NULL && location->rchild!=NULL)
		case_b(parent,location);
	if(location->lchild!=NULL && location->rchild!=NULL)
		case_c(parent,location);
	free(location);
}                                             /*End of del()*/

int preorder(struct node *ptr)
{
	if(root==NULL)
	{
		printf("Tree is empty");
		return 0;
	}
	if(ptr!=NULL)
	{
		printf("%d  ",ptr->info);
		preorder(ptr->lchild);
		preorder(ptr->rchild);
	}
}                                      /*End of preorder()*/

void inorder(struct node *ptr)
{
	if(root==NULL)
	{
		printf("Tree is empty");
		return;
	}
	if(ptr!=NULL)
	{
		inorder(ptr->lchild);
		printf("%d  ",ptr->info);
		inorder(ptr->rchild);
	}
}                                 /*End of inorder()*/

void postorder(struct node *ptr)
{
	if(root==NULL)
	{
		printf("Tree is empty");
		return;
	}
	if(ptr!=NULL)
	{
		postorder(ptr->lchild);
		postorder(ptr->rchild);
		printf("%d  ",ptr->info);
	}
}                               /*End of postorder()*/

void display(struct node *ptr,int level)
{
	int i;
	if ( ptr!=NULL )
	{
		display(ptr->rchild, level+1);
		printf("\n");
		for (i = 0; i < level; i++)
			printf("    ");
		printf("%d", ptr->info);
		display(ptr->lchild, level+1);
	}                                   /*End of if*/
}                                          /*End of display()*/
int main()
{
	int choice,num;
	root=NULL;
	while(1)
	{
		printf("\n");
		printf("1.Insert\n");
		printf("2.Delete\n");
		printf("3.Inorder Traversal\n");
		printf("4.Preorder Traversal\n");
		printf("5.Postorder Traversal\n");
		printf("6.Display\n");
		printf("7.Quit\n");
		printf("Enter your choice : ");
		scanf("%d",&choice);

		switch(choice)
		{
		 case 1:
			printf("Enter the number to be inserted : ");
			scanf("%d",&num);
			insert(num);
			break;
		 case 2:
			printf("Enter the number to be deleted : ");
			scanf("%d",&num);
			del(num);
			break;
		 case 3:
			inorder(root);
			break;
		 case 4:
			preorder(root);
			break;
		 case 5:
			postorder(root);
			break;
		 case 6:
			display(root,1);
			break;
		 case 7:
            break;
		 default:
			printf("Wrong choice\n");
		}                        /*End of switch */
	}                               /*End of while */
}
----------21------------
/* 
    Write a program to read two polynomials and store them using linkedlist.
    Calculate the product of the polynomials and display first polynomial,
    second polynomial and resultant polynomial.
*/

//  location: C:\Users\sandh\Documents   ,  file name : Polymultiply.c

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
struct node
{ 
  int coef;
  int exp;
  struct node *link;  
};

void insert_term(struct node **,int,int);
void traverse(struct node *);
void poly_pdt(struct node **,struct node **,struct node **);
void main()
{ 
     struct node *start_p=NULL,*start_q=NULL,*start_r=NULL;
     int i,n,c,e;
     printf("Enter first polynomial!\n");
     printf("Enter no of terms:");
     scanf("%d",&n);
     for(i=0;i<n;i++)
     {
         printf("Enter coefficient: ");
         scanf("%d",&c);
         printf("Enter exponent: ");
         scanf("%d",&e);
         insert_term(&start_p,c,e);
     }
     printf("Enter second polynomial!\n");
     printf("Enter no of terms:");
     scanf("%d",&n);
     for(i=0;i<n;i++)
     {
         printf("Enter coefficient: ");
         scanf("%d",&c);
         printf("Enter exponent: ");
         scanf("%d",&e);
         insert_term(&start_q,c,e);
     }
     printf("First polynomial: ");
     traverse(start_p);
     printf("Second polynomial: ");
     traverse(start_q);
     poly_pdt(&start_p,&start_q,&start_r);
     printf("Product of the two polynomial:\n");
     traverse(start_r);
}
void insert_term(struct node **start,int c,int e)
{
     struct node *temp,*temp1,*prev;
    if (*start==NULL)
    {
         temp=(struct node*)malloc(sizeof(struct node));
         if (temp==NULL)
             printf("Node is not created, Term cannot be inserted\n");
         else
         {
             temp->coef=c;
             temp->exp=e;
             temp->link=NULL;
             *start=temp;
         }
    }
    else
    {
         temp1=*start;
         while (temp1!=NULL && temp1->exp>e)
         {
              prev=temp1;
              temp1=temp1->link;
         }
         if(temp1==NULL)
         {
              temp=(struct node *)malloc(sizeof(struct node));
              if (temp==NULL)
                 printf("Node is not created\n");
              else
              {
                 temp->coef=c;
                 temp->exp=e;
                 temp->link=NULL;
                 prev->link=temp;
              }
        }
    else
    {
         if (temp1->exp==e)
            temp1->coef=temp1->coef+c;
         else
         {
            if(temp1==*start)
            {  
               temp=(struct node *)malloc (sizeof (struct node));
               if(temp==NULL)
                  printf("Node is not created\n");
               else
               { 
                  temp->coef=c;
                  temp->exp=e;
                  temp->link=*start;
                  *start=temp;
               }
            }
           else
           {
                temp=(struct node *)malloc(sizeof(struct node));
                if (temp==NULL)
                   printf("Node is not created\n");
                else
                {
                   temp->coef=c;
                   temp->exp=e;
                   temp->link=temp1;
                   prev->link=temp;
                }
           }
      }

  }
 }
}
void traverse(struct node *start)
{ 
   struct node *temp;
   temp=start;
   if (temp==NULL)
      printf("Empty polynomial\n");
   else
   { 
      while(temp!=NULL)
      { 
          printf("%d x^%d",temp->coef,temp->exp);
          temp=temp->link;
         if(temp!=NULL)
            printf(" + ");
         else
            printf("\n");
      }
   }
}
void poly_pdt(struct node ** start_p,struct node **start_q,struct node** start_r)
{
    int c,e;
    struct node *pptr,*qptr;
    *start_r=NULL;
    pptr=*start_p;
    qptr=*start_q;
    if (*start_p==NULL && *start_q==NULL)
       printf("\nMultiplication of polynomial is not possible!\n");
    else
    {
       while(pptr!=NULL)
      {
           qptr=*start_q;
           while(qptr!=NULL)
           {
              c=pptr->coef*qptr->coef;
              e=pptr->exp+qptr->exp;
              insert_term(start_r,c,e);
              qptr=qptr->link;
           }
           pptr=pptr->link;
     }
   }
}